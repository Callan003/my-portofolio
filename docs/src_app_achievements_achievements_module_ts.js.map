{"version":3,"file":"src_app_achievements_achievements_module_ts.js","mappings":"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","sources":["./src/app/achievements/achievements-routing.module.ts","./src/app/achievements/achievements.module.ts","./src/app/achievements/achievements.page.ts","./src/app/achievements/achievements.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AchievementsPage } from './achievements.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AchievementsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AchievementsPageRoutingModule {}\r\n","import { ComponentsModule } from './../components/components.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { AchievementsPageRoutingModule } from './achievements-routing.module';\r\n\r\nimport { AchievementsPage } from './achievements.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    AchievementsPageRoutingModule,\r\n    ComponentsModule\r\n  ],\r\n  declarations: [AchievementsPage]\r\n})\r\nexport class AchievementsPageModule {}\r\n","import { AlertController } from '@ionic/angular';\r\nimport { AchievementService } from './../services/achievement.service';\r\nimport { Achievement, AchievementList } from './../common';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-achievements',\r\n  templateUrl: './achievements.page.html',\r\n  styleUrls: ['./achievements.page.scss'],\r\n})\r\nexport class AchievementsPage implements OnInit {\r\n\r\n  achievements: Achievement[];\r\n\r\n  constructor(private achievementService: AchievementService,\r\n              private alertController: AlertController) { }\r\n\r\n  ngOnInit() {\r\n    this.achievements = this.achievementService.getAchievementList();\r\n  }\r\n\r\n  getImage(item): string {\r\n    return `../../assets/Badges/${item.title}${item.level}.webp`;\r\n  }\r\n\r\n  getProgressBarValue(item: Achievement) {\r\n    return item.progress  / (item.limit.length === item.level ? item.limit[item.limit.length - 1] : item.limit[item.level]);\r\n  }\r\n\r\n  async resetAchievements() {\r\n    const resetAchievementsAlert = await this.alertController.create({\r\n      header: \"Please confirm\",\r\n      mode: 'ios',\r\n      message: 'Are you sure you want to reset your Achivements?',\r\n      buttons: [{\r\n        text: 'Cancel',\r\n        cssClass: 'color-dark',\r\n        role: 'cancel'\r\n      }, {\r\n        text: 'Reset',\r\n        cssClass: 'color-success',\r\n        handler: () => {\r\n          this.achievements = this.achievementService.resetAchievements();\r\n        }\r\n      }]\r\n    });\r\n\r\n    resetAchievementsAlert.present();\r\n  }\r\n\r\n  isMaxLevel(achievement) {\r\n    return this.achievementService.isAchievementAtMaxLevel(achievement);\r\n  }\r\n\r\n  openAchievementInfo(achievement) {\r\n    this.achievementService.displayNewAchievementAlert(achievement, false);\r\n  }\r\n\r\n  async openInfo() {\r\n    const alertInfo = await this.alertController.create({\r\n      header: 'Achievements Info',\r\n      mode: 'ios',\r\n      message: 'Here you can find a list of achievements that you can unlock by exploring my portofolio!',\r\n      buttons: [{\r\n        text: 'Ok',\r\n        role: 'cancel',\r\n        cssClass: 'color-success',\r\n      }]\r\n    });\r\n\r\n    alertInfo.present();\r\n  }\r\n\r\n}\r\n","export default \"<ion-header [translucent]=\\\"true\\\" collapse=\\\"fade\\\">\\r\\n  <app-header #header></app-header>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <div class=\\\"center-content\\\">\\r\\n    <h2>\\r\\n      <span class=\\\"text-sub ion-margin-start\\\">Achievements</span>\\r\\n      <ion-button id=\\\"open-popover\\\" fill=\\\"clear\\\" color=\\\"dark\\\" class=\\\"ion-float-right\\\"><ion-icon name=\\\"settings-outline\\\"></ion-icon></ion-button>\\r\\n    </h2>\\r\\n    <ion-popover arrow=\\\"true\\\" dismissOnSelect=\\\"true\\\" trigger=\\\"open-popover\\\">\\r\\n      <ng-template>\\r\\n        <ion-list lines=\\\"none\\\">\\r\\n          <ion-item (click)=\\\"openInfo()\\\" [button]=\\\"true\\\" [detail]=\\\"false\\\">\\r\\n            <ion-icon name=\\\"information-circle-outline\\\" slot=\\\"end\\\"></ion-icon>\\r\\n            <ion-label>Info</ion-label>\\r\\n          </ion-item>\\r\\n          <ion-item [button]=\\\"true\\\" [detail]=\\\"false\\\" (click)=\\\"resetAchievements()\\\">\\r\\n            <ion-icon name=\\\"refresh\\\" slot=\\\"end\\\"></ion-icon>\\r\\n            <ion-label>Reset Progress</ion-label>\\r\\n          </ion-item>\\r\\n        </ion-list>\\r\\n      </ng-template>\\r\\n    </ion-popover>\\r\\n\\r\\n      <div class=\\\"achievement cursor-pointer\\\" *ngFor=\\\"let item of achievements\\\" (click)=\\\"openAchievementInfo(item)\\\">\\r\\n        <img [src]=\\\"getImage(item)\\\" class=\\\"achievement-image\\\" [alt]=\\\"item.title\\\"/>\\r\\n        <div class=\\\"w-100\\\">\\r\\n          <h4 class=\\\"ion-no-margin\\\"><strong>{{item.title}}</strong></h4>\\r\\n    \\r\\n          <p class=\\\"smaller-margin\\\"><i>{{item.description}}</i></p>\\r\\n    \\r\\n          <ion-badge mode=\\\"ios\\\" [color]=\\\"isMaxLevel(item) ? 'success' : item.progress === 0 ? 'medium' : 'dark'\\\">\\r\\n            {{item.progress > item.limit[item.level - 1] && item.progress < item.limit[item.level] ? item.progress : item.limit[item.level - 1] || 0}}\\r\\n            /\\r\\n            {{item.limit[item.level] ? item.limit[item.level] : item.limit[item.limit.length - 1]}}\\r\\n          </ion-badge>\\r\\n          <ion-badge color=\\\"success\\\" mode=\\\"ios\\\" *ngIf=\\\"isMaxLevel(item)\\\" > Max Level</ion-badge>\\r\\n          <ion-progress-bar [value]=\\\"getProgressBarValue(item)\\\" [color]=\\\"isMaxLevel(item) ? 'success' : item.progress === 0 ? 'medium' : 'dark'\\\"></ion-progress-bar>\\r\\n        </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</ion-content>\\r\\n\";"],"names":[],"sourceRoot":"webpack:///"}